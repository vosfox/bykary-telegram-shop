import os
import sys
import json
import logging
from typing import Optional
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://your-app-url.com')

# AI Provider Configuration
OPENPROXY_API_KEY = os.getenv('OPENPROXY_API_KEY')
OPENPROXY_BASE_URL = os.getenv('OPENPROXY_BASE_URL', 'https://api.openproxy.com/v1')

OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
OPENROUTER_MODEL = os.getenv('OPENROUTER_MODEL', 'openai/gpt-3.5-turbo')
OPENROUTER_BASE_URL = os.getenv('OPENROUTER_BASE_URL', 'https://openrouter.ai/api/v1')

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
ai_client = None
current_provider = None

if OPENPROXY_API_KEY:
    ai_client = OpenAI(api_key=OPENPROXY_API_KEY, base_url=OPENPROXY_BASE_URL)
    current_provider = "OpenProxy"
elif OPENROUTER_API_KEY:
    ai_client = OpenAI(api_key=OPENROUTER_API_KEY, base_url=OPENROUTER_BASE_URL)
    current_provider = "OpenRouter"
elif OPENAI_API_KEY:
    ai_client = OpenAI(api_key=OPENAI_API_KEY)
    current_provider = "OpenAI"
else:
    # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
    logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ .env —Ñ–∞–π–ª–µ")
    sys.exit(1)

logger.info(f"‚úÖ AI Provider: {current_provider}")

class ByKaryBot:
    def __init__(self):
        self.application = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –≠—Ç–æ –¥–µ–º–æ-–º–∞–≥–∞–∑–∏–Ω By Kary üëó

‚Äî –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞—Ç–∞–ª–æ–≥
‚Äî –î–æ–±–∞–≤—å –≤ –∫–æ—Ä–∑–∏–Ω—É  
‚Äî –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
‚Äî –û—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Ç—É—Ç

(–≠—Ç–æ –¥–µ–º–æ. –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ ‚Äî –Ω–∞ bykary.ru)
        """
        
        keyboard = [
            [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")],
            [InlineKeyboardButton("üí¨ –ü–æ–º–æ—â—å AI", callback_data="ai_help")],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton("üîó –°–∞–π—Ç", url="https://bykary.ru")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/catalog - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
/cart - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã

<b>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–∞—Ö, –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä–∞—Ö!

<b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ö–∞–∫–∏–µ –ø–ª–∞—Ç—å—è —É –≤–∞—Å –µ—Å—Ç—å?"
‚Ä¢ "–£ –º–µ–Ω—è —Ä–∞–∑–º–µ—Ä –º–µ–∂–¥—É S –∏ M, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å?"
‚Ä¢ "–ö–∞–∫ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?"
‚Ä¢ "–ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏?"
‚Ä¢ "–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ—Ä–∏—Ç—å?"
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
        keyboard = [[InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ By Kary:",
            reply_markup=reply_markup
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "show_cart":
            keyboard = [[InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}#cart"))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:",
                reply_markup=reply_markup
            )
            
        elif query.data == "ai_help":
            await query.edit_message_text(
                "üí¨ <b>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!</b>\n\n"
                "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–∞—Ö, —Ä–∞–∑–º–µ—Ä–∞—Ö, –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –±—Ä–µ–Ω–¥–µ By Kary.\n\n"
                "<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç...</i>",
                parse_mode='HTML'
            )
            
        elif query.data == "my_orders":
            await query.edit_message_text(
                "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
                "–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –º–∞–≥–∞–∑–∏–Ω–∞. –í—Å–µ –∑–∞–∫–∞–∑—ã –Ω–æ—Å—è—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.\n\n"
                "–î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –ø–æ—Å–µ—Ç–∏—Ç–µ bykary.ru",
                parse_mode='HTML'
            )
    
    async def ai_assistant(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
        user_message = update.message.text
        user_name = update.effective_user.first_name
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            system_prompt = """
–¢—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã By Kary (bykary.ru). 

–û –±—Ä–µ–Ω–¥–µ:
- BY KARY —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏
- –ë—Ä–µ–Ω–¥ –≤–æ—Å–ø–µ–≤–∞–µ—Ç –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –Ω–µ–∂–Ω–æ—Å—Ç—å –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å
- –ö–∞–∂–¥–æ–µ –∏–∑–¥–µ–ª–∏–µ –∏–º–µ–µ—Ç –æ—Å–æ–±—É—é –Ω–∞—à–∏–≤–∫—É —Å –ø–æ—Å–ª–∞–Ω–∏–µ–º "–∫ —Å–µ–±–µ –Ω—É–∂–Ω–æ –Ω–µ–∂–Ω–æ"
- –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å - –ö—ç—Ä–∏

–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:
- –§—É—Ç–±–æ–ª–∫–∏ —Å –º–æ–Ω–æ–≥—Ä–∞–º–º–æ–π (—á–µ—Ä–Ω–∞—è, –±–µ–ª–∞—è) - 5900‚ÇΩ
- –ö–æ—Å—Ç—é–º—ã-–ø–æ–ª–æ—Å–∫–∞ –ê–ª–∞–¥–¥–∏–Ω (—Ä–æ–∑–æ–≤—ã–π, –≥–æ–ª—É–±–æ–π) - 15900‚ÇΩ  
- –ü–ª–∞—Ç—å—è-—Ñ—É—Ç–±–æ–ª–∫–∏ "Mama needs champagne" (—Ä–æ–∑–æ–≤–æ–µ, –±–µ–∂–µ–≤–æ–µ) - 6900‚ÇΩ
- –§—É—Ç–±–æ–ª–∫–∞-–ø–æ–ª–æ –≤ –ø–æ–ª–æ—Å–∫—É - 6900‚ÇΩ
- –î–∂–∏–Ω—Å–æ–≤–∞—è –∫—É—Ä—Ç–∫–∞-–∫–æ—Å—É—Ö–∞ –º–æ–ª–æ—á–Ω–∞—è - 12900‚ÇΩ

–†–∞–∑–º–µ—Ä—ã: XS, S, M, L

–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ-—Ä—É—Å—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç bykary.ru.
            """
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            model = "gpt-3.5-turbo"
            if current_provider == "OpenRouter":
                model = OPENROUTER_MODEL  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ .env
            elif current_provider == "OpenProxy":
                model = "gpt-3.5-turbo"  # OpenProxy format
            
            # –ó–∞–ø—Ä–æ—Å –∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            response = ai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))],
                [InlineKeyboardButton("üîó –°–∞–π—Ç bykary.ru", url="https://bykary.ru")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üí¨ [{current_provider}] {ai_response}",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error in AI assistant: {e}")
            
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            keyboard = [
                [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))],
                [InlineKeyboardButton("üîó –°–∞–π—Ç bykary.ru", url="https://bykary.ru")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç bykary.ru",
                reply_markup=reply_markup
            )
    
    async def web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
        try:
            data = json.loads(update.effective_message.web_app_data.data)
            
            if data.get('type') == 'order_completed':
                order_id = data.get('order_id')
                total_amount = data.get('total_amount')
                
                success_message = f"""
‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>

–°—É–º–º–∞: {total_amount}‚ÇΩ

<i>–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –º–∞–≥–∞–∑–∏–Ω–∞. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ bykary.ru</i>

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –±—Ä–µ–Ω–¥—É By Kary! üíï
                """
                
                keyboard = [[InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ bykary.ru", url="https://bykary.ru")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    success_message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"Error processing WebApp data: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN or BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
            
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("catalog", self.catalog_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.web_app_data))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.ai_assistant))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    bot = ByKaryBot()
    bot.run()

