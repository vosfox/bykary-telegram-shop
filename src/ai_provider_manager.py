import os
import json
import logging
import subprocess
import sys
from typing import Optional, Dict, Any
from openai import OpenAI

logger = logging.getLogger(__name__)

class AIProviderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ —Å fallback —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.providers = self._init_providers()
        self.current_provider = None
        self.client = None
        self._init_primary_provider()
    
    def _init_providers(self) -> Dict[str, Dict[str, Any]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return {
            'puter': {
                'enabled': os.getenv('USE_PUTER', 'true').lower() == 'true',
                'priority': 1,
                'fallback_on_error': True
            },
            'openproxy': {
                'api_key': os.getenv('OPENPROXY_API_KEY'),
                'base_url': os.getenv('OPENPROXY_BASE_URL', 'https://api.openproxy.com/v1'),
                'enabled': bool(os.getenv('OPENPROXY_API_KEY')),
                'priority': 2
            },
            'openrouter': {
                'api_key': os.getenv('OPENROUTER_API_KEY'),
                'base_url': os.getenv('OPENROUTER_BASE_URL', 'https://openrouter.ai/api/v1'),
                'model': os.getenv('OPENROUTER_MODEL', 'openai/gpt-3.5-turbo'),
                'enabled': bool(os.getenv('OPENROUTER_API_KEY')),
                'priority': 3
            },
            'openai': {
                'api_key': os.getenv('OPENAI_API_KEY'),
                'enabled': bool(os.getenv('OPENAI_API_KEY')),
                'priority': 4
            }
        }
    
    def _init_primary_provider(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_providers = sorted(
            [(name, config) for name, config in self.providers.items() if config.get('enabled')],
            key=lambda x: x[1].get('priority', 999)
        )
        
        logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {[name for name, _ in sorted_providers]}")
        
        for provider_name, config in sorted_providers:
            logger.info(f"üîÑ –ü—ã—Ç–∞—é—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: {provider_name}")
            if self._try_init_provider(provider_name):
                break
        
        if not self.current_provider:
            logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            logger.error(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: USE_PUTER={os.getenv('USE_PUTER')}, OPENAI_API_KEY={'SET' if os.getenv('OPENAI_API_KEY') else 'NOT SET'}")
            raise Exception("–ù–∏ –æ–¥–∏–Ω AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
    
    def _try_init_provider(self, provider_name: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            config = self.providers[provider_name]
            
            if provider_name == 'puter':
                return self._init_puter()
            elif provider_name in ['openproxy', 'openrouter']:
                self.client = OpenAI(
                    api_key=config['api_key'],
                    base_url=config['base_url']
                )
            elif provider_name == 'openai':
                self.client = OpenAI(api_key=config['api_key'])
            
            self.current_provider = provider_name
            logger.info(f"‚úÖ AI Provider –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {provider_name}")
            return True
            
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {provider_name}: {e}")
            return False
    
    def _init_puter(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Puter.js —á–µ—Ä–µ–∑ Node.js"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Node.js
            subprocess.run(['node', '--version'], capture_output=True, check=True)
            self.current_provider = 'puter'
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.warning("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Puter.js")
            return False
    
    def _call_puter_api(self, messages: list, model: str = "gpt-4o", **kwargs) -> str:
        """–í—ã–∑–æ–≤ Puter.js API —á–µ—Ä–µ–∑ Node.js —Å–∫—Ä–∏–ø—Ç"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Node.js —Å–∫—Ä–∏–ø—Ç–∞
            request_data = {
                'messages': messages,
                'model': model,
                'max_tokens': kwargs.get('max_tokens', 500),
                'temperature': kwargs.get('temperature', 0.7)
            }
            
            # –í—ã–∑—ã–≤–∞–µ–º Node.js —Å–∫—Ä–∏–ø—Ç
            script_path = os.path.join(os.path.dirname(__file__), 'puter_client.js')
            result = subprocess.run(
                ['node', script_path, json.dumps(request_data)],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                response = json.loads(result.stdout)
                return response.get('content', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞')
            else:
                raise Exception(f"Puter API error: {result.stderr}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Puter API: {e}")
            raise
    
    def chat_completion(self, messages: list, model: str = None, **kwargs) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI —Å fallback"""
        max_retries = 3
        last_error = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ (—Ç–µ–∫—É—â–∏–π + fallback)
        providers_to_try = [self.current_provider]
        
        # –î–æ–±–∞–≤–ª—è–µ–º fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fallback
        if self.providers[self.current_provider].get('fallback_on_error'):
            other_providers = [
                name for name, config in sorted(
                    self.providers.items(),
                    key=lambda x: x[1].get('priority', 999)
                ) if name != self.current_provider and config.get('enabled')
            ]
            providers_to_try.extend(other_providers)
        
        for provider_name in providers_to_try:
            for attempt in range(max_retries if provider_name == self.current_provider else 1):
                try:
                    return self._make_request(provider_name, messages, model, **kwargs)
                    
                except Exception as e:
                    last_error = e
                    logger.warning(f"–û—à–∏–±–∫–∞ {provider_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    
                    if attempt < max_retries - 1 and provider_name == self.current_provider:
                        continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å —Ç–µ–º –∂–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
                    else:
                        break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        raise Exception(f"–í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
    
    def _make_request(self, provider_name: str, messages: list, model: str = None, **kwargs) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
        if provider_name == 'puter':
            return self._call_puter_api(messages, model or "gpt-4o", **kwargs)
        
        # –î–ª—è OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        if provider_name != self.current_provider:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            old_client = self.client
            old_provider = self.current_provider
            
            if not self._try_init_provider(provider_name):
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name}")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
            if model is None:
                if provider_name == 'openrouter':
                    model = self.providers['openrouter']['model']
                else:
                    model = "gpt-3.5-turbo"
            
            response = self.client.chat.completions.create(
                model=model,
                messages=messages,
                **kwargs
            )
            
            return response.choices[0].message.content.strip()
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–ª–∏—Å—å
            if provider_name != self.current_provider:
                self.client = old_client
                self.current_provider = old_provider
    
    def get_current_provider(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return self.current_provider
    
    def get_stylists_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Å—Ç–∏–ª–∏—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        stylists = {
            'puter': '–ê–Ω—è',
            'openproxy': '–ö—Å–µ–Ω–∏—è', 
            'openrouter': '–ö—Å–µ–Ω–∏—è',
            'openai': '–ö—Å–µ–Ω–∏—è'
        }
        return stylists.get(self.current_provider, '–ö—Å–µ–Ω–∏—è')
    
    def is_fallback_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω –ª–∏ fallback –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return self.providers[self.current_provider].get('fallback_on_error', False)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
ai_manager = AIProviderManager()