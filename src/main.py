import os
import sys
# DON'T CHANGE THIS !!!
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, send_from_directory
from flask_cors import CORS
from src.models.user import db
from src.routes.user import user_bp
from src.routes.products import products_bp
from src.routes.cart import cart_bp
from src.routes.orders import orders_bp

app = Flask(__name__, static_folder=os.path.join(os.path.dirname(__file__), 'static'))
app.config['SECRET_KEY'] = 'asdf#FGSgvasgf$5$WGT'

# –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
CORS(app)

app.register_blueprint(user_bp, url_prefix='/api')
app.register_blueprint(products_bp, url_prefix='/api')
app.register_blueprint(cart_bp, url_prefix='/api')
app.register_blueprint(orders_bp, url_prefix='/api')

# uncomment if you need to use database
app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{os.path.join(os.path.dirname(__file__), 'database', 'app.db')}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db.init_app(app)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
from src.models.product import Product
from src.models.product_image import ProductImage
from src.models.cart import CartItem
from src.models.order import Order

with app.app_context():
    db.create_all()

@app.route('/init')
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from src.init_data import init_products
        init_products()
        return "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

@app.route('/download-images')
def download_images():
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    try:
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.dirname(__file__)))
        from download_product_images import download_product_images
        download_product_images()
        return "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–∫–∞—á–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"

@app.route('/setup-images')
def setup_images():
    """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É —Å –Ω–æ–≤—ã–º–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from src.models.product import Product
        from src.models.product_image import ProductImage
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        products_images = {
            1: ['/static/images/product_1_1.webp', '/static/images/product_1_2.webp'],
            2: ['/static/images/product_2_1.webp', '/static/images/product_2_2.webp'],
            3: ['/static/images/product_3_1.webp', '/static/images/product_3_2.webp'],
            4: ['/static/images/product_4_1.webp', '/static/images/product_4_2.webp'],
            5: ['/static/images/product_5_1.webp', '/static/images/product_5_2.webp'],
            6: ['/static/images/product_6_1.webp', '/static/images/product_6_2.webp', '/static/images/product_6_3.webp'],
            7: ['/static/images/product_7_1.webp', '/static/images/product_7_2.webp'],
            8: ['/static/images/product_8_1.webp', '/static/images/product_8_2.webp', '/static/images/product_8_3.webp']
        }
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ProductImage.query.delete()
        
        updated_products = 0
        total_images = 0
        
        for product_id, images in products_images.items():
            product = Product.query.get(product_id)
            if product:
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                product.image_url = images[0]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for index, image_url in enumerate(images):
                    product_image = ProductImage(
                        product_id=product_id,
                        image_url=image_url,
                        is_primary=(index == 0),
                        alt_text=f"{product.name} - —Ñ–æ—Ç–æ {index + 1}",
                        order_index=index
                    )
                    db.session.add(product_image)
                    total_images += 1
                
                updated_products += 1
        
        db.session.commit()
        
        return f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_products} —Ç–æ–≤–∞—Ä–æ–≤ —Å {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏! –ì–∞–ª–µ—Ä–µ–∏ –≥–æ—Ç–æ–≤—ã!"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"

@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve(path):
    static_folder_path = app.static_folder
    if static_folder_path is None:
            return "Static folder not configured", 404

    if path != "" and os.path.exists(os.path.join(static_folder_path, path)):
        return send_from_directory(static_folder_path, path)
    else:
        index_path = os.path.join(static_folder_path, 'index.html')
        if os.path.exists(index_path):
            return send_from_directory(static_folder_path, 'index.html')
        else:
            return "index.html not found", 404


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
